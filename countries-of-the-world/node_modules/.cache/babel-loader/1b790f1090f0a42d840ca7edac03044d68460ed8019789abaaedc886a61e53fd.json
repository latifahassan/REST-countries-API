{"ast":null,"code":"var _jsxFileName = \"/home/hassanlatifa98/REST-countries-API/countries-of-the-world/src/CountryList.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport Card from '@mui/material/Card';\nimport CardContent from '@mui/material/CardContent';\nimport Typography from '@mui/material/Typography';\nimport Grid from '@mui/material/Grid';\nimport Box from '@mui/material/Box';\nimport { styled } from '@mui/system';\nimport { API_URL_ALL, API_URL_REGION } from './api'; // Assuming API_URL_ALL and other API URLs are defined in a separate file called 'api.js'\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CountryCard = styled(Card)(_ref => {\n  let {\n    theme\n  } = _ref;\n  return {\n    borderRadius: theme.spacing(2),\n    boxShadow: theme.shadows[3],\n    marginBottom: theme.spacing(4),\n    display: 'flex',\n    flexDirection: 'column',\n    justifyContent: 'space-between',\n    height: '100%'\n  };\n});\n_c = CountryCard;\nconst FlagImage = styled('div')(_ref2 => {\n  let {\n    imageUrl\n  } = _ref2;\n  return {\n    width: '100%',\n    paddingBottom: '56.25%',\n    // 16:9 aspect ratio (adjust as needed)\n    backgroundSize: 'cover',\n    backgroundPosition: 'center',\n    backgroundImage: `url(${imageUrl})`\n  };\n});\n_c2 = FlagImage;\nconst CountryList = () => {\n  _s();\n  const [countryList, setCountryList] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [selectedRegion, setSelectedRegion] = useState('');\n  useEffect(() => {\n    const fetchCountryList = async () => {\n      try {\n        let url = API_URL_ALL;\n        if (selectedRegion) {\n          url = API_URL_REGION(selectedRegion);\n        }\n        const response = await fetch(url);\n        if (!response.ok) {\n          throw new Error('Failed to fetch country data');\n        }\n        const data = await response.json();\n\n        // Log flag dimensions for each country\n        data.forEach(country => {\n          const flagImage = new Image();\n          flagImage.src = country.flags.svg;\n          flagImage.onload = () => {\n            console.log(`${country.name.common}: ${flagImage.width}px x ${flagImage.height}px`);\n          };\n        });\n        setCountryList(data);\n        setLoading(false);\n      } catch (error) {\n        console.error(error);\n      }\n    };\n    fetchCountryList();\n  }, [selectedRegion]);\n  return /*#__PURE__*/_jsxDEV(Box, {\n    py: 4,\n    px: 2,\n    maxWidth: \"1200px\",\n    mx: \"auto\",\n    children: /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      spacing: 4,\n      children: loading ?\n      /*#__PURE__*/\n      // Render skeleton or loading state here\n      _jsxDEV(\"p\", {\n        children: \"Loading...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 11\n      }, this) : countryList.map(country => /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 12,\n        sm: 6,\n        md: 4,\n        lg: 3,\n        children: /*#__PURE__*/_jsxDEV(Link, {\n          to: `/${country.name.common}`,\n          className: \"country-link\",\n          children: /*#__PURE__*/_jsxDEV(CountryCard, {\n            children: [/*#__PURE__*/_jsxDEV(FlagImage, {\n              imageUrl: country.flags.svg,\n              paddingBottom: `${885 / 726 * 100}%`\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 89,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(CardContent, {\n              children: [/*#__PURE__*/_jsxDEV(Typography, {\n                variant: \"h5\",\n                component: \"div\",\n                children: country.name.common\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 94,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(Typography, {\n                variant: \"body2\",\n                color: \"textSecondary\",\n                component: \"p\",\n                children: [\"Region: \", country.region]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 97,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(Typography, {\n                variant: \"body2\",\n                color: \"textSecondary\",\n                component: \"p\",\n                children: [\"Capital: \", country.capital]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 104,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(Typography, {\n                variant: \"body2\",\n                color: \"textSecondary\",\n                component: \"p\",\n                children: [\"Population: \", country.population]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 111,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 93,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 88,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 15\n        }, this)\n      }, country.name.common, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 72,\n    columnNumber: 5\n  }, this);\n};\n_s(CountryList, \"SKfYrRs9SzNw1YNcMitNCLxHe0c=\");\n_c3 = CountryList;\nexport default CountryList;\nvar _c, _c2, _c3;\n$RefreshReg$(_c, \"CountryCard\");\n$RefreshReg$(_c2, \"FlagImage\");\n$RefreshReg$(_c3, \"CountryList\");","map":{"version":3,"names":["React","useEffect","useState","Link","Card","CardContent","Typography","Grid","Box","styled","API_URL_ALL","API_URL_REGION","jsxDEV","_jsxDEV","CountryCard","_ref","theme","borderRadius","spacing","boxShadow","shadows","marginBottom","display","flexDirection","justifyContent","height","_c","FlagImage","_ref2","imageUrl","width","paddingBottom","backgroundSize","backgroundPosition","backgroundImage","_c2","CountryList","_s","countryList","setCountryList","loading","setLoading","selectedRegion","setSelectedRegion","fetchCountryList","url","response","fetch","ok","Error","data","json","forEach","country","flagImage","Image","src","flags","svg","onload","console","log","name","common","error","py","px","maxWidth","mx","children","container","fileName","_jsxFileName","lineNumber","columnNumber","map","item","xs","sm","md","lg","to","className","variant","component","color","region","capital","population","_c3","$RefreshReg$"],"sources":["/home/hassanlatifa98/REST-countries-API/countries-of-the-world/src/CountryList.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport Card from '@mui/material/Card';\nimport CardContent from '@mui/material/CardContent';\nimport Typography from '@mui/material/Typography';\nimport Grid from '@mui/material/Grid';\nimport Box from '@mui/material/Box';\nimport { styled } from '@mui/system';\nimport {\n  API_URL_ALL,\n  API_URL_REGION,\n} from './api'; // Assuming API_URL_ALL and other API URLs are defined in a separate file called 'api.js'\n\nconst CountryCard = styled(Card)(({ theme }) => ({\n  borderRadius: theme.spacing(2),\n  boxShadow: theme.shadows[3],\n  marginBottom: theme.spacing(4),\n  display: 'flex',\n  flexDirection: 'column',\n  justifyContent: 'space-between',\n  height: '100%',\n}));\n\nconst FlagImage = styled('div')(({ imageUrl }) => ({\n  width: '100%',\n  paddingBottom: '56.25%', // 16:9 aspect ratio (adjust as needed)\n  backgroundSize: 'cover',\n  backgroundPosition: 'center',\n  backgroundImage: `url(${imageUrl})`,\n}));\n\nconst CountryList = () => {\n  const [countryList, setCountryList] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [selectedRegion, setSelectedRegion] = useState('');\n\n  useEffect(() => {\n    const fetchCountryList = async () => {\n      try {\n        let url = API_URL_ALL;\n        if (selectedRegion) {\n          url = API_URL_REGION(selectedRegion);\n        }\n        const response = await fetch(url);\n        if (!response.ok) {\n          throw new Error('Failed to fetch country data');\n        }\n        const data = await response.json();\n\n        // Log flag dimensions for each country\n        data.forEach((country) => {\n          const flagImage = new Image();\n          flagImage.src = country.flags.svg;\n          flagImage.onload = () => {\n            console.log(\n              `${country.name.common}: ${flagImage.width}px x ${flagImage.height}px`\n            );\n          };\n        });\n\n        setCountryList(data);\n        setLoading(false);\n      } catch (error) {\n        console.error(error);\n      }\n    };\n\n    fetchCountryList();\n  }, [selectedRegion]);\n\n  return (\n    <Box py={4} px={2} maxWidth=\"1200px\" mx=\"auto\">\n      <Grid container spacing={4}>\n        {loading ? (\n          // Render skeleton or loading state here\n          <p>Loading...</p>\n        ) : (\n          countryList.map((country) => (\n            <Grid\n              item\n              key={country.name.common}\n              xs={12}\n              sm={6}\n              md={4}\n              lg={3}\n            >\n              <Link to={`/${country.name.common}`} className=\"country-link\">\n                <CountryCard>\n                  <FlagImage\n                    imageUrl={country.flags.svg}\n                    paddingBottom={`${(885 / 726) * 100}%`}\n                  />\n                  <CardContent>\n                    <Typography variant=\"h5\" component=\"div\">\n                      {country.name.common}\n                    </Typography>\n                    <Typography\n                      variant=\"body2\"\n                      color=\"textSecondary\"\n                      component=\"p\"\n                    >\n                      Region: {country.region}\n                    </Typography>\n                    <Typography\n                      variant=\"body2\"\n                      color=\"textSecondary\"\n                      component=\"p\"\n                    >\n                      Capital: {country.capital}\n                    </Typography>\n                    <Typography\n                      variant=\"body2\"\n                      color=\"textSecondary\"\n                      component=\"p\"\n                    >\n                      Population: {country.population}\n                    </Typography>\n                  </CardContent>\n                </CountryCard>\n              </Link>\n            </Grid>\n          ))\n        )}\n      </Grid>\n    </Box>\n  );\n};\n\nexport default CountryList;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}