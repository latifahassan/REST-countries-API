{"ast":null,"code":"var _jsxFileName = \"/home/hassanlatifa98/REST-countries-API/countries-of-the-world/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { Routes, Route } from 'react-router-dom';\nimport { createTheme, ThemeProvider } from '@mui/material/styles';\nimport CssBaseline from '@mui/material/CssBaseline';\nimport AppBar from '@mui/material/AppBar';\nimport Toolbar from '@mui/material/Toolbar';\nimport Typography from '@mui/material/Typography';\nimport IconButton from '@mui/material/IconButton';\nimport DarkModeIcon from '@mui/icons-material/DarkMode';\nimport DarkModeOutlinedIcon from '@mui/icons-material/DarkModeOutlined';\nimport Filter from './Filter';\nimport CountryDetails from './CountryDetails';\nimport CountryList from './CountryList';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const API_URL_ALL = 'https://restcountries.com/v3.1/all';\nexport default function App() {\n  _s();\n  const [mode, setMode] = useState('light');\n  const [selectedCountry, setSelectedCountry] = useState(null);\n  const [selectedRegion, setSelectedRegion] = useState('');\n  const [regions, setRegions] = useState([]);\n  const lightTheme = createTheme({\n    palette: {\n      mode: 'light'\n    }\n  });\n  const darkTheme = createTheme({\n    palette: {\n      mode: 'dark',\n      background: {\n        default: '#1F2937',\n        // Dark blue background color\n        paper: '#374151' // Dark blue surface color\n      },\n\n      text: {\n        primary: '#FFFFFF' // White text color\n      }\n    }\n  });\n\n  useEffect(() => {\n    // Fetch the available regions from the API and set them in the state\n    const fetchRegions = async () => {\n      try {\n        const response = await fetch(API_URL_ALL);\n        const data = await response.json();\n        const uniqueRegions = [...new Set(data.map(country => country.region))];\n        setRegions(uniqueRegions);\n      } catch (error) {\n        console.error(error);\n      }\n    };\n    fetchRegions();\n  }, []);\n  const toggleMode = () => {\n    setMode(prevMode => prevMode === 'light' ? 'dark' : 'light');\n  };\n  const handleCountrySelect = country => {\n    setSelectedCountry(country);\n  };\n  const handleRegionChange = event => {\n    setSelectedRegion(event.target.value);\n  };\n  return /*#__PURE__*/_jsxDEV(ThemeProvider, {\n    theme: mode === 'light' ? lightTheme : darkTheme,\n    children: [/*#__PURE__*/_jsxDEV(CssBaseline, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: [/*#__PURE__*/_jsxDEV(AppBar, {\n        position: \"static\",\n        color: \"inherit\",\n        children: /*#__PURE__*/_jsxDEV(Toolbar, {\n          children: [/*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"h6\",\n            component: \"div\",\n            sx: {\n              flexGrow: 1\n            },\n            children: \"Where in the World?\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 76,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Filter, {\n            regions: regions,\n            selectedRegion: selectedRegion,\n            handleRegionChange: handleRegionChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 80,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(IconButton, {\n            color: \"inherit\",\n            onClick: toggleMode,\n            children: mode === 'light' ? /*#__PURE__*/_jsxDEV(DarkModeOutlinedIcon, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 87,\n              columnNumber: 35\n            }, this) : /*#__PURE__*/_jsxDEV(DarkModeIcon, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 87,\n              columnNumber: 62\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 86,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Routes, {\n        children: [/*#__PURE__*/_jsxDEV(Route, {\n          path: \"/\",\n          element: /*#__PURE__*/_jsxDEV(CountryList, {\n            selectedRegion: selectedRegion,\n            handleCountrySelect: handleCountrySelect\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 94,\n            columnNumber: 22\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          path: \"/country/:name\",\n          element: /*#__PURE__*/_jsxDEV(CountryDetails, {\n            selectedCountry: selectedCountry\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 98,\n            columnNumber: 22\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 71,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"vbVN8cq21WzbH32jg+dJZUxXK/8=\");\n_c = App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","Routes","Route","createTheme","ThemeProvider","CssBaseline","AppBar","Toolbar","Typography","IconButton","DarkModeIcon","DarkModeOutlinedIcon","Filter","CountryDetails","CountryList","jsxDEV","_jsxDEV","API_URL_ALL","App","_s","mode","setMode","selectedCountry","setSelectedCountry","selectedRegion","setSelectedRegion","regions","setRegions","lightTheme","palette","darkTheme","background","default","paper","text","primary","fetchRegions","response","fetch","data","json","uniqueRegions","Set","map","country","region","error","console","toggleMode","prevMode","handleCountrySelect","handleRegionChange","event","target","value","theme","children","fileName","_jsxFileName","lineNumber","columnNumber","className","position","color","variant","component","sx","flexGrow","onClick","path","element","_c","$RefreshReg$"],"sources":["/home/hassanlatifa98/REST-countries-API/countries-of-the-world/src/App.js"],"sourcesContent":["import React, { useState,useEffect } from 'react';\nimport { Routes, Route } from 'react-router-dom';\nimport { createTheme, ThemeProvider } from '@mui/material/styles';\nimport CssBaseline from '@mui/material/CssBaseline';\nimport AppBar from '@mui/material/AppBar';\nimport Toolbar from '@mui/material/Toolbar';\nimport Typography from '@mui/material/Typography';\nimport IconButton from '@mui/material/IconButton';\nimport DarkModeIcon from '@mui/icons-material/DarkMode';\nimport DarkModeOutlinedIcon from '@mui/icons-material/DarkModeOutlined';\nimport Filter from './Filter';\nimport CountryDetails from './CountryDetails';\nimport CountryList from './CountryList';\n\nexport const API_URL_ALL = 'https://restcountries.com/v3.1/all';\n\nexport default function App() {\n  const [mode, setMode] = useState('light');\n  const [selectedCountry, setSelectedCountry] = useState(null);\n  const [selectedRegion, setSelectedRegion] = useState('');\n  const [regions, setRegions] = useState([]);\n\n  const lightTheme = createTheme({\n    palette: {\n      mode: 'light',\n    },\n  });\n\n  const darkTheme = createTheme({\n    palette: {\n      mode: 'dark',\n      background: {\n        default: '#1F2937', // Dark blue background color\n        paper: '#374151', // Dark blue surface color\n      },\n      text: {\n        primary: '#FFFFFF', // White text color\n      },\n    },\n  });\n\n  useEffect(() => {\n    // Fetch the available regions from the API and set them in the state\n    const fetchRegions = async () => {\n      try {\n        const response = await fetch(API_URL_ALL);\n        const data = await response.json();\n        const uniqueRegions = [...new Set(data.map((country) => country.region))];\n        setRegions(uniqueRegions);\n      } catch (error) {\n        console.error(error);\n      }\n    };\n\n    fetchRegions();\n  }, []);\n\n  const toggleMode = () => {\n    setMode((prevMode) => (prevMode === 'light' ? 'dark' : 'light'));\n  };\n\n  const handleCountrySelect = (country) => {\n    setSelectedCountry(country);\n  };\n\n  const handleRegionChange = (event) => {\n    setSelectedRegion(event.target.value);\n  };\n\n  return (\n    <ThemeProvider theme={mode === 'light' ? lightTheme : darkTheme}>\n      <CssBaseline />\n      <div className=\"App\">\n        <AppBar position=\"static\" color=\"inherit\">\n          <Toolbar>\n            <Typography variant=\"h6\" component=\"div\" sx={{ flexGrow: 1 }}>\n              Where in the World?\n            </Typography>\n            \n            <Filter\n              regions={regions}\n              selectedRegion={selectedRegion}\n              handleRegionChange={handleRegionChange}\n            />\n\n            <IconButton color=\"inherit\" onClick={toggleMode}>\n              {mode === 'light' ? <DarkModeOutlinedIcon /> : <DarkModeIcon />}\n            </IconButton>\n          </Toolbar>\n        </AppBar>\n        <Routes>\n          <Route\n            path=\"/\"\n            element={<CountryList selectedRegion={selectedRegion} handleCountrySelect={handleCountrySelect} />}\n          />\n          <Route\n            path=\"/country/:name\"\n            element={<CountryDetails selectedCountry={selectedCountry} />}\n          />\n        </Routes>\n      </div>\n    </ThemeProvider>\n  );\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}